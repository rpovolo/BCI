/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bci.user.controllers;

import com.bci.user.dto.User;
import com.bci.user.dto.UserResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import com.bci.user.dto.Error;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-22T14:12:45.206294946-03:00[America/Argentina/Mendoza]")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users : Create an user
     * This operation creates one user. You may specify one user model
     *
     * @param acceptLanguage This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive (required)
     * @param accept Header parameter that advertises which content types, expressed as MIME types, the client is able to understand (required)
     * @param user  (required)
     * @return OK (status code 201)
     *         or 400 - Bad Request (status code 400)
     *         or 401 - Unauthorized Response (status code 401)
     *         or 404 - Not Found Response (status code 404)
     *         or 500 - Internal Error Response (status code 500)
     */
    @Operation(
            operationId = "createUser",
            summary = "Create an user",
            description = "This operation creates one user. You may specify one user model",
            tags = { "user" },
            responses = {
                    @ApiResponse(responseCode = "201", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "400 - Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "401 - Unauthorized Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "404 - Not Found Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "500 - Internal Error Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/users",
            produces = { "application/json" },
            consumes = { "application/json" }
    )
    default ResponseEntity<UserResponse> createUser(
            @NotNull @Parameter(name = "Accept-Language", description = "This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = true) String acceptLanguage,
            @NotNull @Parameter(name = "Accept", description = "Header parameter that advertises which content types, expressed as MIME types, the client is able to understand", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = true) String accept,
            @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * DELETE /users/{id} : Delete a user
     * This operation delete an user.
     *
     * @param id A unique identifier for a user (required)
     * @param acceptLanguage This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive (required)
     * @param accept Header parameter that advertises which content types, expressed as MIME types, the client is able to understand (required)
     * @return No Content (status code 204)
     *         or 400 - Bad Request (status code 400)
     *         or 401 - Unauthorized Response (status code 401)
     *         or 400 - Bad Request (status code 404)
     *         or 500 - Internal Error Response (status code 500)
     */
    @Operation(
            operationId = "deleteUserById",
            summary = "Delete a user",
            description = "This operation delete an user.",
            tags = { "user" },
            responses = {
                    @ApiResponse(responseCode = "204", description = "No Content"),
                    @ApiResponse(responseCode = "400", description = "400 - Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "401 - Unauthorized Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "400 - Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "500 - Internal Error Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/users/{id}",
            produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteUserById(
            @Parameter(name = "id", description = "A unique identifier for a user", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "Accept-Language", description = "This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = true) String acceptLanguage,
            @NotNull @Parameter(name = "Accept", description = "Header parameter that advertises which content types, expressed as MIME types, the client is able to understand", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = true) String accept
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * GET /users/{id} : Get a user
     * This operation retrieve an user by id.
     *
     * @param id A unique identifier for a user (required)
     * @param acceptLanguage This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive (required)
     * @param accept Header parameter that advertises which content types, expressed as MIME types, the client is able to understand (required)
     * @return OK (status code 200)
     *         or 400 - Bad Request (status code 400)
     *         or 401 - Unauthorized Response (status code 401)
     *         or 404 - Not Found Response (status code 404)
     *         or 500 - Internal Error Response (status code 500)
     */
    @Operation(
            operationId = "getUserById",
            summary = "Get a user",
            description = "This operation retrieve an user by id.",
            tags = { "user" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "400 - Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "401 - Unauthorized Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "404 - Not Found Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "500 - Internal Error Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/users/{id}",
            produces = { "application/json" }
    )
    default ResponseEntity<UserResponse> getUserById(
            @Parameter(name = "id", description = "A unique identifier for a user", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "Accept-Language", description = "This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = true) String acceptLanguage,
            @NotNull @Parameter(name = "Accept", description = "Header parameter that advertises which content types, expressed as MIME types, the client is able to understand", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = true) String accept
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * GET /users : Get all users / Search users
     * This operation retrieves a list of users.
     *
     * @param acceptLanguage This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive (required)
     * @param accept Header parameter that advertises which content types, expressed as MIME types, the client is able to understand (required)
     * @return OK (status code 200)
     *         or 400 - Bad Request (status code 400)
     *         or 401 - Unauthorized Response (status code 401)
     *         or 404 - Not Found Response (status code 404)
     *         or 500 - Internal Error Response (status code 500)
     */
    @Operation(
            operationId = "getUsers",
            summary = "Get all users / Search users",
            description = "This operation retrieves a list of users.",
            tags = { "user" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "400 - Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "401 - Unauthorized Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "404 - Not Found Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "500 - Internal Error Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/users",
            produces = { "application/json" }
    )
    default ResponseEntity<List<UserResponse>> getUsers(
            @NotNull @Parameter(name = "Accept-Language", description = "This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = true) String acceptLanguage,
            @NotNull @Parameter(name = "Accept", description = "Header parameter that advertises which content types, expressed as MIME types, the client is able to understand", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = true) String accept
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * PUT /users/{id} : Update an user
     * This operation update an user.
     *
     * @param id A unique identifier for a user (required)
     * @param acceptLanguage This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive (required)
     * @param accept Header parameter that advertises which content types, expressed as MIME types, the client is able to understand (required)
     * @param user  (required)
     * @return OK (status code 200)
     *         or 400 - Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or 404 - Not Found Response (status code 404)
     *         or 500 - Internal Error Response (status code 500)
     */
    @Operation(
            operationId = "updateUserById",
            summary = "Update an user",
            description = "This operation update an user.",
            tags = { "user" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "400 - Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "404", description = "404 - Not Found Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "500 - Internal Error Response", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{id}",
            produces = { "application/json" },
            consumes = { "application/json" }
    )
    default ResponseEntity<UserResponse> updateUserById(
            @Parameter(name = "id", description = "A unique identifier for a user", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "Accept-Language", description = "This header advertises which languages (natural languages) the client is able to understand, and which locale variant is preferred, is case insensitive", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = true) String acceptLanguage,
            @NotNull @Parameter(name = "Accept", description = "Header parameter that advertises which content types, expressed as MIME types, the client is able to understand", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = true) String accept,
            @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
